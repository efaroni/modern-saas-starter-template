name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy'
        required: true
        default: 'latest'
        type: string
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string

concurrency:
  group: production-deployment
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  validate:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      release_tag: ${{ steps.check.outputs.release_tag }}
      is_manual: ${{ steps.check.outputs.is_manual }}

    steps:
      - name: Validate manual deployment
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]; then
            echo "‚ùå Production deployment not confirmed. Expected 'DEPLOY', got '${{ github.event.inputs.confirm }}'"
            exit 1
          fi
          echo "‚úÖ Production deployment confirmed"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment parameters
        id: check
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            IS_MANUAL="false"
            echo "üè∑Ô∏è Release deployment: $RELEASE_TAG"
          else
            RELEASE_TAG="${{ github.event.inputs.tag }}"
            IS_MANUAL="true"
            echo "üöÄ Manual deployment: $RELEASE_TAG"
            
            # Verify tag exists
            if ! git tag | grep -q "^$RELEASE_TAG$"; then
              echo "‚ùå Tag '$RELEASE_TAG' does not exist"
              exit 1
            fi
          fi

          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "is_manual=$IS_MANUAL" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT

  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'

    steps:
      - name: Checkout release
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.release_tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Run unit tests
        run: npm test -- --passWithNoTests --coverage

      - name: Build production
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true

      - name: Bundle analysis
        run: |
          if [ -f .next/analyze/bundle-analyzer.json ]; then
            echo "üìä Bundle analysis available"
            # Add any bundle size checks here
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'

    steps:
      - name: Checkout release
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.release_tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=high
          if [ $? -ne 0 ]; then
            echo "‚ùå Security vulnerabilities found!"
            echo "Run 'npm audit fix' to resolve issues"
            exit 1
          fi
          echo "‚úÖ No high-severity vulnerabilities found"

      - name: Check for secrets in code
        run: |
          # Basic secret detection
          if grep -r -i "password\|secret\|key\|token" . --include="*.js" --include="*.ts" --include="*.tsx" | grep -v node_modules | grep -v ".git" | grep "=" | head -5; then
            echo "‚ö†Ô∏è Potential secrets found in code. Please review."
            # Don't fail deployment for this, just warn
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, pre-deployment-tests, security-scan]
    if: needs.validate.outputs.should_deploy == 'true'
    environment:
      name: production
      url: https://${{ secrets.PRODUCTION_DOMAIN }}

    steps:
      - name: Checkout release
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.release_tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create database backup
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          echo "üîÑ Creating database backup before production migration..."
          BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)-release-${{ needs.validate.outputs.release_tag }}"

          if [ -n "$NEON_API_KEY" ] && [ -n "$NEON_PROJECT_ID" ]; then
            curl -X POST "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
              -H "Authorization: Bearer $NEON_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"$BACKUP_NAME\", \"parent_id\": \"main\"}" || \
              echo "‚ö†Ô∏è Backup creation failed - proceeding with migration (manual backup recommended)"
            echo "‚úÖ Database backup created: $BACKUP_NAME"
          else
            echo "‚ö†Ô∏è Neon API credentials not configured - skipping automatic backup"
            echo "üìã Manual backup recommended before production deployment"
          fi

      - name: Run production database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NODE_ENV: production
        run: |
          echo "üîÑ Running database migrations for production..."
          echo "‚ö†Ô∏è Production migration in progress - DO NOT interrupt"
          tsx scripts/run-migrations.ts --validate --comprehensive
          echo "‚úÖ Production database migrations completed successfully"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üåç Production deployment: $DEPLOYMENT_URL"

      - name: Assign Production Domain
        if: secrets.PRODUCTION_DOMAIN
        run: |
          vercel alias set ${{ steps.deploy.outputs.deployment_url }} ${{ secrets.PRODUCTION_DOMAIN }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "üéØ Production URL: https://${{ secrets.PRODUCTION_DOMAIN }}"

  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: Wait for deployment propagation
        run: sleep 60

      - name: Production health check
        run: |
          if [ "${{ secrets.PRODUCTION_DOMAIN }}" ]; then
            BASE_URL="https://${{ secrets.PRODUCTION_DOMAIN }}"
          else
            BASE_URL="${{ needs.deploy-production.outputs.deployment_url }}"
          fi

          HEALTH_URL="$BASE_URL/api/health"
          echo "üîç Production health check: $HEALTH_URL"

          for i in {1..10}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Production health check passed"
              break
            fi
            echo "‚è≥ Health check failed, attempt $i/10"
            sleep 15
          done

          if [ $i -eq 10 ]; then
            echo "‚ùå Production health check failed after 10 attempts"
            exit 1
          fi

      - name: Production smoke tests
        run: |
          if [ "${{ secrets.PRODUCTION_DOMAIN }}" ]; then
            BASE_URL="https://${{ secrets.PRODUCTION_DOMAIN }}"
          else
            BASE_URL="${{ needs.deploy-production.outputs.deployment_url }}"
          fi

          echo "üß™ Running production smoke tests on: $BASE_URL"

          # Test critical pages
          PAGES=("/" "/auth" "/api/health")

          for page in "${PAGES[@]}"; do
            echo "Testing $BASE_URL$page"
            if ! curl -f -s -w "HTTP %{http_code} - %{time_total}s\n" "$BASE_URL$page" > /dev/null; then
              echo "‚ùå Failed: $page"
              exit 1
            fi
          done

          echo "‚úÖ All smoke tests passed"

  monitor:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always() && needs.post-deployment-tests.result == 'success'

    steps:
      - name: Setup monitoring alerts
        run: |
          echo "üìä Setting up post-deployment monitoring..."
          # Placeholder for monitoring setup
          # This could integrate with your monitoring service

      - name: Performance baseline
        run: |
          if [ "${{ secrets.PRODUCTION_DOMAIN }}" ]; then
            BASE_URL="https://${{ secrets.PRODUCTION_DOMAIN }}"
          else
            BASE_URL="${{ needs.deploy-production.outputs.deployment_url }}"
          fi

          echo "üìà Establishing performance baseline..."
          # Basic performance check
          curl -o /dev/null -s -w "Total time: %{time_total}s\nSize: %{size_download} bytes\n" "$BASE_URL"

  notify:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [validate, deploy-production, post-deployment-tests, monitor]
    if: always()

    steps:
      - name: Success notification
        if: needs.deploy-production.result == 'success' && needs.post-deployment-tests.result == 'success'
        run: |
          echo "üéâ Production deployment successful!"
          echo "Release: ${{ needs.validate.outputs.release_tag }}"
          echo "Manual deployment: ${{ needs.validate.outputs.is_manual }}"

          if [ "${{ secrets.PRODUCTION_DOMAIN }}" ]; then
            echo "URL: https://${{ secrets.PRODUCTION_DOMAIN }}"
          else
            echo "URL: ${{ needs.deploy-production.outputs.deployment_url }}"
          fi

      - name: Failure notification
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Release: ${{ needs.validate.outputs.release_tag }}"
          echo "Please check the deployment logs and consider rollback if necessary."

  rollback-on-failure:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: failure()

    steps:
      - name: Automatic rollback
        run: |
          echo "üö® Deployment failure detected, initiating automatic rollback..."
          # Placeholder for rollback logic
          # This would typically involve:
          # 1. Reverting to previous Vercel deployment
          # 2. Notifying the team
          # 3. Creating an incident report

          echo "‚ö†Ô∏è Manual rollback required - check Vercel dashboard"
          echo "Previous deployments: https://vercel.com/dashboard/deployments"
