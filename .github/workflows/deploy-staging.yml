name: Deploy to Staging

on:
  push:
    branches:
      - main
      - develop
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - preview

concurrency:
  group: staging-deployment
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check deployment conditions
        id: check
        run: |
          # Determine environment based on branch or manual input
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref_name }}" == "staging" ]; then
            ENVIRONMENT="staging"
          elif [ "${{ github.ref_name }}" == "develop" ]; then
            ENVIRONMENT="staging"
          elif [ "${{ github.ref_name }}" == "main" ]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="preview"
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "üöÄ Will deploy to: $ENVIRONMENT"

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          # Mock database configuration for build
          DATABASE_URL: 'postgresql://mock:mock@localhost:5432/mock_db'
          # Auth configuration
          AUTH_SECRET: ${{ format('staging-build-{0}-{1}', github.run_id, github.sha) }}
          NEXTAUTH_URL: 'http://localhost:3000'

      - name: Run unit tests
        run: npm test -- --passWithNoTests

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build-test]
    if: needs.validate.outputs.should_deploy == 'true'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Staging
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üåê Deployed to: $DEPLOYMENT_URL"

      - name: Assign Custom Domain (Staging)
        if: needs.validate.outputs.environment == 'staging' && github.ref_name == 'main'
        run: |
          # Assign staging subdomain for main branch deployments
          vercel alias set ${{ steps.deploy.outputs.preview_url }} staging-${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
          echo "üìç Staging URL: https://staging-${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          HEALTH_URL="${{ needs.deploy-staging.outputs.preview_url }}/api/health"
          echo "üîç Checking health at: $HEALTH_URL"

          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "‚è≥ Health check failed, attempt $i/5"
            sleep 10
          done

          echo "‚ùå Health check failed after 5 attempts"
          exit 1

      - name: Basic smoke test
        run: |
          BASE_URL="${{ needs.deploy-staging.outputs.preview_url }}"

          # Test main page
          if ! curl -f -s "$BASE_URL" > /dev/null; then
            echo "‚ùå Main page failed"
            exit 1
          fi

          # Test auth page
          if ! curl -f -s "$BASE_URL/auth" > /dev/null; then
            echo "‚ùå Auth page failed"
            exit 1
          fi

          echo "‚úÖ Smoke tests passed"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging, health-check]
    if: always()

    steps:
      - name: Deployment Success
        if: needs.deploy-staging.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "üéâ Staging deployment successful!"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "URL: ${{ needs.deploy-staging.outputs.preview_url }}"

          # Add GitHub deployment status
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{
              "ref": "${{ github.sha }}",
              "environment": "${{ needs.validate.outputs.environment }}",
              "description": "Automated staging deployment",
              "auto_merge": false
            }'

      - name: Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Check the logs above for details."
          exit 1

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()

    steps:
      - name: Clean up preview deployments
        if: github.event_name == 'push' && github.ref_name != 'main'
        run: |
          echo "üßπ Cleaning up old preview deployments..."
          # Note: Vercel automatically manages preview deployments
          # This is a placeholder for any custom cleanup logic
