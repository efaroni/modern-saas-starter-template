name: 🔒 Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - codeql
          - dependencies
          - secrets

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'security-scan-v1'

jobs:
  # Job 1: CodeQL Analysis for source code vulnerabilities
  codeql-analysis:
    name: 🔍 CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'codeql' || github.event.inputs.scan_type == ''

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Custom queries for SaaS-specific vulnerabilities
          queries: +security-and-quality,security-experimental
          config: |
            name: "SaaS Security Configuration"
            disable-default-rules: false
            queries:
              - name: security-and-quality
                uses: security-and-quality
              - name: security-experimental  
                uses: security-experimental
            query-filters:
              - include:
                  kind: problem
                  severity: error
              - include:
                  kind: problem
                  severity: warning
                  tags: security

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          # Build the application for better CodeQL analysis
          npm run build --if-present
        env:
          # Provide minimal env vars for build (generated unique secret per run)
          NEXTAUTH_SECRET: ${{ format('security-scan-{0}-{1}', github.run_id, github.sha) }}
          NEXTAUTH_URL: 'http://localhost:3000'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'
          upload: true
          # Custom SARIF category for easier filtering
          sarif-category: 'codeql-${{matrix.language}}'

  # Job 2: Secret Detection with Gitleaks
  secret-detection:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Gitleaks
        uses: actions/cache@v4
        with:
          path: ~/.cache/gitleaks
          key: ${{ env.CACHE_KEY_PREFIX }}-gitleaks-${{ runner.os }}

      - name: Run Gitleaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config: |
            [allowlist]
            description = "SaaS Template Allowlist"
            files = [
              '''(?i)\.env\.example$''',
              '''(?i)readme\.md$''',
              '''(?i)package\.json$''',
              '''(?i)\.github/.*\.yml$''',
              '''(?i)tests?/.*\.(ts|js|json)$'''
            ]
            regexes = [
              '''dummy-secret''',
              '''test-key''',
              '''sk_test_.*''',
              '''example\.com''',
              '''localhost''',
              '''127\.0\.0\.1''',
              '''your-.*-here''',
              '''replace-with-actual'''
            ]

            [rules.generic-api-key]
            id = "generic-api-key"
            description = "Generic API Key"
            regex = '''(?i)(?:api[_-]?key|apikey|secret|token)[_-]?[:=]\s*['"]?([a-zA-Z0-9_\-]{16,})['"]*'''
            secretGroup = 1

            [rules.stripe-keys]
            id = "stripe-secret-key"
            description = "Stripe Secret Key"
            regex = '''sk_live_[a-zA-Z0-9]{24,}'''

            [rules.aws-keys]
            id = "aws-access-key"
            description = "AWS Access Key"
            regex = '''AKIA[0-9A-Z]{16}'''

            [rules.openai-keys]
            id = "openai-api-key" 
            description = "OpenAI API Key"
            regex = '''sk-[a-zA-Z0-9]{48}'''

            [rules.database-urls]
            id = "database-connection"
            description = "Database Connection String"
            regex = '''(?i)(?:postgres|mysql|mongodb)://[^:\s]+:[^@\s]+@[^/\s]+'''

      - name: Upload Gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: 'gitleaks'

  # Job 3: Dependency Vulnerability Scanning
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run npm audit
        id: npm-audit
        run: |
          echo "Running npm audit..."
          if npm audit --audit-level=moderate --json > npm-audit.json; then
            echo "npm_audit_status=passed" >> $GITHUB_OUTPUT
          else
            echo "npm_audit_status=failed" >> $GITHUB_OUTPUT
          fi

          # Parse results and create summary
          node -e "
            const fs = require('fs');
            try {
              const audit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
              const vulnerabilities = audit.vulnerabilities || {};
              
              let summary = {
                info: 0, low: 0, moderate: 0, high: 0, critical: 0
              };
              
              Object.values(vulnerabilities).forEach(vuln => {
                if (vuln.severity in summary) {
                  summary[vuln.severity]++;
                }
              });
              
              console.log('Vulnerability Summary:');
              console.log('- Critical:', summary.critical);
              console.log('- High:', summary.high);
              console.log('- Moderate:', summary.moderate);
              console.log('- Low:', summary.low);
              console.log('- Info:', summary.info);
              
              fs.writeFileSync('audit-summary.json', JSON.stringify(summary));
              
              // Set outputs for workflow decisions
              console.log('critical=' + summary.critical);
              console.log('high=' + summary.high);
              
            } catch (e) {
              console.log('Error parsing audit results:', e.message);
              console.log('critical=0');
              console.log('high=0');
            }
          " >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Convert npm audit to SARIF
        if: always()
        run: |
          # Use npx to avoid global installation conflicts
          echo "Processing SARIF results with Microsoft SARIF multitool..."

          # Create SARIF from npm audit results
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            try {
              const audit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
              const vulnerabilities = audit.vulnerabilities || {};
              
              const sarif = {
                version: '2.1.0',
                \$schema: 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json',
                runs: [{
                  tool: {
                    driver: {
                      name: 'npm-audit',
                      version: '1.0.0',
                      informationUri: 'https://docs.npmjs.com/cli/audit'
                    }
                  },
                  results: []
                }]
              };
              
              Object.entries(vulnerabilities).forEach(([name, vuln]) => {
                const result = {
                  ruleId: 'npm-audit-' + vuln.severity,
                  message: {
                    text: \`\${name}: \${vuln.via[0]?.title || 'Vulnerability detected'}\`
                  },
                  level: vuln.severity === 'critical' ? 'error' : 
                         vuln.severity === 'high' ? 'error' :
                         vuln.severity === 'moderate' ? 'warning' : 'note',
                  locations: [{
                    physicalLocation: {
                      artifactLocation: {
                        uri: 'package-lock.json'
                      }
                    }
                  }],
                  properties: {
                    severity: vuln.severity,
                    package: name,
                    version: vuln.via[0]?.range || 'unknown'
                  }
                };
                
                sarif.runs[0].results.push(result);
              });
              
              fs.writeFileSync('npm-audit.sarif', JSON.stringify(sarif, null, 2));
              console.log('Generated SARIF file with', sarif.runs[0].results.length, 'findings');
              
            } catch (e) {
              console.log('Error generating SARIF:', e.message);
              // Create empty SARIF on error
              const emptySarif = {
                version: '2.1.0',
                runs: [{ tool: { driver: { name: 'npm-audit' } }, results: [] }]
              };
              fs.writeFileSync('npm-audit.sarif', JSON.stringify(emptySarif));
            }
          "
        continue-on-error: true

      - name: Upload npm audit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: npm-audit.sarif
          category: 'npm-audit'

      - name: Fail on critical/high vulnerabilities
        if: steps.npm-audit.outputs.critical != '0' || steps.npm-audit.outputs.high != '0'
        run: |
          echo "❌ Critical or high severity vulnerabilities found!"
          echo "Critical: ${{ steps.npm-audit.outputs.critical }}"
          echo "High: ${{ steps.npm-audit.outputs.high }}"
          echo "Please review and fix these vulnerabilities before proceeding."
          exit 1

  # Job 4: Snyk Security Scanning (free tier)
  snyk-scan:
    name: 🐍 Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk results to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: 'snyk'

  # Job 5: License Compliance Check
  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Check licenses
        id: license-check
        run: |
          echo "Checking licenses..."

          # Define prohibited licenses (copyleft, commercial restrictions)
          PROHIBITED_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0,LGPL-2.1,LGPL-3.0,EPL-1.0,EPL-2.0,MPL-1.1,MPL-2.0,CDDL-1.0,CDDL-1.1,OSL-3.0,EUPL-1.1,EUPL-1.2"

          # Run license check
          if license-checker --json --excludePrivatePackages > licenses.json; then
            echo "License check completed successfully"
          else
            echo "License check failed"
            exit 1
          fi

          # Parse and validate licenses
          node -e "
            const fs = require('fs');
            const licenses = JSON.parse(fs.readFileSync('licenses.json', 'utf8'));
            const prohibited = '$PROHIBITED_LICENSES'.split(',');
            
            let violations = [];
            let summary = {};
            
            Object.entries(licenses).forEach(([pkg, info]) => {
              const license = info.licenses;
              if (!summary[license]) summary[license] = 0;
              summary[license]++;
              
              if (prohibited.includes(license)) {
                violations.push({ package: pkg, license });
              }
            });
            
            console.log('License Summary:');
            Object.entries(summary)
              .sort(([,a], [,b]) => b - a)
              .forEach(([license, count]) => {
                console.log(\`- \${license}: \${count} packages\`);
              });
            
            if (violations.length > 0) {
              console.log('\n❌ License Violations Found:');
              violations.forEach(v => {
                console.log(\`- \${v.package}: \${v.license}\`);
              });
              process.exit(1);
            } else {
              console.log('\n✅ No license violations found');
            }
          "

  # Job 6: Container Security (if Dockerfile exists)
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        id: dockerfile-check
        run: |
          if [ -f "Dockerfile" ] || [ -f "docker/Dockerfile" ] || [ -f ".devcontainer/Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
            echo "Found Dockerfile, proceeding with container scan"
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "No Dockerfile found, skipping container scan"
          fi

      - name: Build Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        run: |
          echo "Building Docker image with proper dependency resolution..."
          # Build with --no-cache to ensure fresh build and catch dependency issues
          docker build --no-cache -t saas-security-scan:latest . || {
            echo "Docker build failed. Checking for common issues..."
            echo "Ensuring dependencies are available..."
            if [ -f "package.json" ]; then
              echo "package.json found - dependencies should be handled by Dockerfile"
            else
              echo "No package.json found - this might cause build issues"
            fi
            exit 1
          }

      - name: Run Trivy container scan
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'saas-security-scan:latest'
          format: 'sarif'
          output: 'trivy-container.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container.sarif
          category: 'trivy-container'

  # Job 7: Custom Security Rules
  custom-security-checks:
    name: 🛡️ Custom Security Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Custom SaaS Security Checks
        run: |
          echo "🔍 Running custom security checks for SaaS application..."

          # Check for hardcoded secrets patterns
          echo "Checking for hardcoded secrets..."
          SECRETS_FOUND=0

          # Common secret patterns specific to this stack
          if grep -r "sk_live_" --include="*.ts" --include="*.js" --include="*.json" . --exclude-dir=node_modules; then
            echo "❌ Live Stripe keys found in code"
            SECRETS_FOUND=1
          fi

          if grep -r "sk-[a-zA-Z0-9]\{48\}" --include="*.ts" --include="*.js" . --exclude-dir=node_modules; then
            echo "❌ OpenAI API keys found in code"
            SECRETS_FOUND=1
          fi

          # Check for unsafe authentication patterns
          echo "Checking authentication security..."
          AUTH_ISSUES=0

          if grep -r "password.*===.*password" --include="*.ts" --include="*.js" . --exclude-dir=node_modules --exclude-dir=tests; then
            echo "⚠️ Potential plain text password comparison found"
            AUTH_ISSUES=1
          fi

          # Check for SQL injection vulnerabilities
          echo "Checking for SQL injection risks..."
          SQL_ISSUES=0

          if grep -r "\`.*\${.*}\`.*sql\|sql.*\`.*\${.*}\`" --include="*.ts" --include="*.js" . --exclude-dir=node_modules; then
            echo "⚠️ Potential SQL injection vulnerability found"
            SQL_ISSUES=1
          fi

          # Check for XSS vulnerabilities
          echo "Checking for XSS risks..."
          XSS_ISSUES=0

          if grep -r "dangerouslySetInnerHTML\|innerHTML.*=" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . --exclude-dir=node_modules; then
            echo "⚠️ Potential XSS vulnerability found"
            XSS_ISSUES=1
          fi

          # Check environment variable handling
          echo "Checking environment variable security..."
          ENV_ISSUES=0

          if grep -r "process\.env\[.*\]" --include="*.ts" --include="*.js" . --exclude-dir=node_modules; then
            echo "⚠️ Dynamic environment variable access found (prefer process.env.VAR_NAME)"
            ENV_ISSUES=1
          fi

          # Summary
          TOTAL_ISSUES=$((SECRETS_FOUND + AUTH_ISSUES + SQL_ISSUES + XSS_ISSUES + ENV_ISSUES))

          echo "📊 Custom Security Check Summary:"
          echo "- Hardcoded secrets: $SECRETS_FOUND"
          echo "- Authentication issues: $AUTH_ISSUES"
          echo "- SQL injection risks: $SQL_ISSUES"
          echo "- XSS vulnerabilities: $XSS_ISSUES"
          echo "- Environment variable issues: $ENV_ISSUES"
          echo "- Total issues: $TOTAL_ISSUES"

          if [ $SECRETS_FOUND -gt 0 ]; then
            echo "❌ Critical security issues found!"
            exit 1
          fi

          if [ $TOTAL_ISSUES -gt 2 ]; then
            echo "⚠️ Multiple security issues found. Please review and fix."
            exit 1
          fi

          echo "✅ Custom security checks passed"

  # Job 8: Security Summary and PR Comment
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs:
      [
        codeql-analysis,
        secret-detection,
        dependency-scan,
        license-check,
        custom-security-checks,
      ]
    if: always()

    steps:
      - name: Generate Security Report
        id: security-report
        run: |
          echo "## 🔒 Security Scan Results" > security-report.md
          echo "" >> security-report.md
          echo "| Security Check | Status | Details |" >> security-report.md
          echo "|---------------|--------|---------|" >> security-report.md

          # CodeQL results
          if [ "${{ needs.codeql-analysis.result }}" == "success" ]; then
            echo "| CodeQL Analysis | ✅ Passed | No critical vulnerabilities detected |" >> security-report.md
          else
            echo "| CodeQL Analysis | ❌ Failed | Vulnerabilities detected - check Security tab |" >> security-report.md
          fi

          # Secret detection results
          if [ "${{ needs.secret-detection.result }}" == "success" ]; then
            echo "| Secret Detection | ✅ Passed | No secrets detected in repository |" >> security-report.md
          else
            echo "| Secret Detection | ❌ Failed | Potential secrets found - review immediately |" >> security-report.md
          fi

          # Dependency scan results  
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "| Dependency Scan | ✅ Passed | No critical dependency vulnerabilities |" >> security-report.md
          else
            echo "| Dependency Scan | ❌ Failed | High/critical vulnerabilities in dependencies |" >> security-report.md
          fi

          # License check results
          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "| License Check | ✅ Passed | All licenses are compliant |" >> security-report.md
          else
            echo "| License Check | ❌ Failed | License compliance issues found |" >> security-report.md
          fi

          # Custom security checks
          if [ "${{ needs.custom-security-checks.result }}" == "success" ]; then
            echo "| Custom Security | ✅ Passed | No custom security issues found |" >> security-report.md
          else
            echo "| Custom Security | ❌ Failed | Security issues detected in code patterns |" >> security-report.md
          fi

          echo "" >> security-report.md
          echo "### Next Steps" >> security-report.md
          echo "1. Review any failed checks in the GitHub Security tab" >> security-report.md
          echo "2. Address critical and high-severity vulnerabilities" >> security-report.md
          echo "3. Update dependencies with known vulnerabilities" >> security-report.md
          echo "4. Remove any detected secrets from the codebase" >> security-report.md
          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*This report was generated automatically by the Security Scanning workflow*" >> security-report.md

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔒 Security Scan Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # Job 9: Notification on failure
  notify-on-failure:
    name: 🚨 Failure Notification
    runs-on: ubuntu-latest
    needs:
      [
        codeql-analysis,
        secret-detection,
        dependency-scan,
        custom-security-checks,
      ]
    if: always() && (needs.codeql-analysis.result == 'failure' || needs.secret-detection.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.custom-security-checks.result == 'failure')

    steps:
      - name: Send notification
        run: |
          echo "🚨 SECURITY ALERT: Critical security issues detected!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.run_id }}"
          echo ""
          echo "Please review the security findings immediately:"
          echo "https://github.com/${{ github.repository }}/security/code-scanning"

          # In a real implementation, you might want to:
          # - Send Slack/Teams notification
          # - Create an issue
          # - Send email notification
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Security vulnerabilities detected in ${{ github.repository }}!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
