
> modern-saas-starter-template@0.1.0 test
> jest

PASS __tests__/app/dev/auth/login-form.test.tsx
PASS __tests__/lib/auth/avatar-upload.test.ts
PASS __tests__/app/dev/auth/page.test.tsx
PASS __tests__/integration/auth/session-persistence.test.ts
PASS __tests__/app/dev/auth/user-profile-form.test.tsx
PASS __tests__/lib/auth/password-validator.test.ts
PASS lib/hooks/useApiKeyValidation.test.ts
PASS __tests__/lib/auth/session-management.test.ts
PASS __tests__/lib/auth/user-profile.test.ts
PASS __tests__/lib/auth/auth-service.test.ts
PASS lib/api-keys/validators.test.ts
FAIL __tests__/lib/auth/providers/database-test.test.ts
  ● DatabaseTestAuthProvider › getUserById › should get user by ID

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database-test.test.ts:130:23)

PASS __tests__/lib/auth/session-storage.test.ts
PASS __tests__/lib/auth/providers/mock.test.ts
PASS __tests__/lib/auth/password-reset.test.ts
FAIL __tests__/lib/auth/rate-limiter.test.ts
  ● RateLimiter › checkRateLimit › should differentiate between different action types

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      60 |       const signupResult = await rateLimiter.checkRateLimit(identifier, 'signup')
      61 |       
    > 62 |       expect(loginResult.allowed).toBe(false)
         |                                   ^
      63 |       expect(signupResult.allowed).toBe(true)
      64 |     })
      65 |

      at Object.toBe (__tests__/lib/auth/rate-limiter.test.ts:62:35)

  ● RateLimiter › getRecentFailures › should return all failures when no filters provided

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 2
    Received:    0

      135 |       const failures = await rateLimiter.getRecentFailures()
      136 |       
    > 137 |       expect(failures.length).toBeGreaterThanOrEqual(2)
          |                               ^
      138 |       failures.forEach(failure => {
      139 |         expect(failure.success).toBe(false)
      140 |       })

      at Object.toBeGreaterThanOrEqual (__tests__/lib/auth/rate-limiter.test.ts:137:31)

  ● RateLimiter › integration with different rate limits › should apply correct limits for different actions

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      218 |       const signupResult = await rateLimiter.checkRateLimit(identifier, 'signup')
      219 |       
    > 220 |       expect(loginResult.allowed).toBe(false)
          |                                   ^
      221 |       expect(signupResult.allowed).toBe(false)
      222 |     })
      223 |

      at Object.toBe (__tests__/lib/auth/rate-limiter.test.ts:220:35)

FAIL __tests__/lib/auth/password-expiration.test.ts
  ● Console

    console.error
      Failed to check password expiration: DrizzleQueryError: Failed query: select "id", "updated_at", "created_at" from "users" where "users"."id" = $1 limit $2
      params: non-existent-user,1
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at /Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/postgres-js/session.ts:58:17
          at PasswordExpirationService.checkPasswordExpiration (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/password-expiration.ts:57:22)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/password-expiration.test.ts:71:22) {
        query: 'select "id", "updated_at", "created_at" from "users" where "users"."id" = $1 limit $2',
        params: [ 'non-existent-user', 1 ],
        cause: PostgresError: invalid input syntax for type uuid: "non-existent-user"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '22P02',
          where: "unnamed portal parameter $1 = '...'",
          file: 'uuid.c',
          line: '133',
          routine: 'string_to_uuid'
        }
      }

       96 |       }
       97 |     } catch (error) {
    >  98 |       console.error('Failed to check password expiration:', error)
          |               ^
       99 |       // Return safe defaults on error
      100 |       return {
      101 |         isExpired: false,

      at PasswordExpirationService.error [as checkPasswordExpiration] (lib/auth/password-expiration.ts:98:15)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:71:22)

    console.error
      Failed to mark password as updated: DrizzleQueryError: Failed query: update "users" set "updated_at" = $1 where "users"."id" = $2
      params: 2025-07-16T13:47:25.726Z,non-existent-user
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at PasswordExpirationService.markPasswordUpdated (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/password-expiration.ts:170:7)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/password-expiration.test.ts:141:7) {
        query: 'update "users" set "updated_at" = $1 where "users"."id" = $2',
        params: [ '2025-07-16T13:47:25.726Z', 'non-existent-user' ],
        cause: PostgresError: invalid input syntax for type uuid: "non-existent-user"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '22P02',
          where: "unnamed portal parameter $2 = '...'",
          file: 'uuid.c',
          line: '133',
          routine: 'string_to_uuid'
        }
      }

      173 |         .where(eq(users.id, userId))
      174 |     } catch (error) {
    > 175 |       console.error('Failed to mark password as updated:', error)
          |               ^
      176 |     }
      177 |   }
      178 |

      at PasswordExpirationService.error [as markPasswordUpdated] (lib/auth/password-expiration.ts:175:15)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:141:7)

    console.error
      Failed to check password expiration: Error: User not found
          at PasswordExpirationService.checkPasswordExpiration (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/password-expiration.ts:68:15)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at PasswordExpirationService.sendExpirationNotification (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/password-expiration.ts:203:22)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/password-expiration.test.ts:151:7)

       96 |       }
       97 |     } catch (error) {
    >  98 |       console.error('Failed to check password expiration:', error)
          |               ^
       99 |       // Return safe defaults on error
      100 |       return {
      101 |         isExpired: false,

      at PasswordExpirationService.error [as checkPasswordExpiration] (lib/auth/password-expiration.ts:98:15)
      at PasswordExpirationService.sendExpirationNotification (lib/auth/password-expiration.ts:203:22)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:151:7)

  ● PasswordExpirationService › checkPasswordExpiration › should return not expired for new password

    Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values ($1, $2, $3, $4, $5, default, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
    params: 00000000-0000-0000-0000-000000000001,test@example.com,,Test User,$2y$10$hoiBxm.6v9ENzfqkcR7q2urS4SeOkWhJSXvnq9kjH.57Z5IDqBCc2

      309 |   async createTestUser(overrides: Partial<InsertUser> = {}): Promise<InsertUser> {
      310 |     const user = await testDataFactories.createAuthUser(overrides)
    > 311 |     const [insertedUser] = await testDb.insert(users).values(user).returning()
          |                            ^
      312 |     return insertedUser
      313 |   },
      314 |

      at PostgresJsPreparedQuery.queryWithCache (node_modules/src/pg-core/session.ts:74:11)
      at node_modules/src/postgres-js/session.ts:58:17
      at Object.createTestUser (lib/db/test-helpers.ts:311:28)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:13:16)

    Cause:
    PostgresError: duplicate key value violates unique constraint "users_email_key"

      at ErrorResponse (node_modules/postgres/cjs/src/connection.js:794:26)
      at handle (node_modules/postgres/cjs/src/connection.js:480:6)
      at Socket.data (node_modules/postgres/cjs/src/connection.js:315:9)

  ● PasswordExpirationService › getUsersWithExpiringPasswords › should return users with expiring passwords

    Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values ($1, $2, $3, $4, $5, default, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
    params: 00000000-0000-0000-0000-000000000001,test@example.com,,Test User,$2y$10$bRPwW6.Ajb9/PKqOGI13q.bgT8tYag7s1d/8x.jk0vE/NWq8Y3bkS

      309 |   async createTestUser(overrides: Partial<InsertUser> = {}): Promise<InsertUser> {
      310 |     const user = await testDataFactories.createAuthUser(overrides)
    > 311 |     const [insertedUser] = await testDb.insert(users).values(user).returning()
          |                            ^
      312 |     return insertedUser
      313 |   },
      314 |

      at PostgresJsPreparedQuery.queryWithCache (node_modules/src/pg-core/session.ts:74:11)
      at node_modules/src/postgres-js/session.ts:58:17
      at Object.createTestUser (lib/db/test-helpers.ts:311:28)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:13:16)

    Cause:
    PostgresError: duplicate key value violates unique constraint "users_email_key"

      at ErrorResponse (node_modules/postgres/cjs/src/connection.js:794:26)
      at handle (node_modules/postgres/cjs/src/connection.js:480:6)
      at Socket.data (node_modules/postgres/cjs/src/connection.js:315:9)

  ● PasswordExpirationService › integration scenarios › should handle complete password expiration workflow

    Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values ($1, $2, $3, $4, $5, default, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
    params: 00000000-0000-0000-0000-000000000001,test@example.com,,Test User,$2y$10$u.xQpWJ5f0QOlV5S0pWG4.waZ2n2UA386pUMRmQgFn1UQTTeCnHNO

      309 |   async createTestUser(overrides: Partial<InsertUser> = {}): Promise<InsertUser> {
      310 |     const user = await testDataFactories.createAuthUser(overrides)
    > 311 |     const [insertedUser] = await testDb.insert(users).values(user).returning()
          |                            ^
      312 |     return insertedUser
      313 |   },
      314 |

      at PostgresJsPreparedQuery.queryWithCache (node_modules/src/pg-core/session.ts:74:11)
      at node_modules/src/postgres-js/session.ts:58:17
      at Object.createTestUser (lib/db/test-helpers.ts:311:28)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:13:16)

    Cause:
    PostgresError: duplicate key value violates unique constraint "users_email_key"

      at ErrorResponse (node_modules/postgres/cjs/src/connection.js:794:26)
      at handle (node_modules/postgres/cjs/src/connection.js:480:6)
      at Socket.data (node_modules/postgres/cjs/src/connection.js:315:9)

PASS __tests__/app/dev/auth/oauth-buttons.test.tsx
PASS __tests__/integration/auth/complete-user-workflows.test.ts
FAIL __tests__/lib/auth/session-manager.test.ts
  ● Console

    console.error
      Database user creation error: DrizzleQueryError: Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values (default, $1, $2, $3, $4, $5, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
      params: test@example.com,,Test User,$2y$12$0BGQRA5xnXOEA5wATZSVc.ENWKmdlU0FpT71MO34tzQChRzOY.LCC,
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at /Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/postgres-js/session.ts:58:17
          at DatabaseTestAuthProvider.createUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database-test.ts:95:25)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:16:20) {
        query: 'insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values (default, $1, $2, $3, $4, $5, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"',
        params: [
          'test@example.com',
          null,
          'Test User',
          '$2y$12$0BGQRA5xnXOEA5wATZSVc.ENWKmdlU0FpT71MO34tzQChRzOY.LCC',
          null
        ],
        cause: PostgresError: duplicate key value violates unique constraint "users_email_key"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23505',
          detail: 'Key (email)=(test@example.com) already exists.',
          schema_name: 'public',
          table_name: 'users',
          constraint_name: 'users_email_key',
          file: 'nbtinsert.c',
          line: '666',
          routine: '_bt_check_unique'
        }
      }

      111 |       }
      112 |     } catch (error) {
    > 113 |       console.error('Database user creation error:', error)
          |               ^
      114 |       return {
      115 |         success: false,
      116 |         error: 'User creation failed'

      at DatabaseTestAuthProvider.error [as createUser] (lib/auth/providers/database-test.ts:113:15)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:16:20)

    console.error
      Failed to create session: DrizzleQueryError: Failed query: insert into "user_sessions" ("id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at") values (default, $1, $2, $3, default, $4, $5, $6, default) returning "id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at"
      params: 8a74238d-f9aa-4710-ad5f-23e47f5b6b22,9e2aaf0bf3cfbe5c7968d3776ef2092654ecb3f871da753f6cbf6adad2abd356,127.0.0.1,true,2025-07-16T13:47:25.193Z,2025-07-16T14:47:25.193Z
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at /Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/postgres-js/session.ts:58:17
          at DatabaseSessionStorage.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/database-session-storage.ts:60:25)
          at SessionManager.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/session-manager.ts:66:28)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:58:23) {
        query: 'insert into "user_sessions" ("id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at") values (default, $1, $2, $3, default, $4, $5, $6, default) returning "id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at"',
        params: [
          '8a74238d-f9aa-4710-ad5f-23e47f5b6b22',
          '9e2aaf0bf3cfbe5c7968d3776ef2092654ecb3f871da753f6cbf6adad2abd356',
          '127.0.0.1',
          true,
          '2025-07-16T13:47:25.193Z',
          '2025-07-16T14:47:25.193Z'
        ],
        cause: PostgresError: insert or update on table "user_sessions" violates foreign key constraint "user_sessions_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(8a74238d-f9aa-4710-ad5f-23e47f5b6b22) is not present in table "users".',
          schema_name: 'public',
          table_name: 'user_sessions',
          constraint_name: 'user_sessions_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      77 |       return sessionToken
      78 |     } catch (error) {
    > 79 |       console.error('Failed to create session:', error)
         |               ^
      80 |       throw new Error('Session creation failed')
      81 |     }
      82 |   }

      at DatabaseSessionStorage.error [as createSession] (lib/auth/database-session-storage.ts:79:15)
      at SessionManager.createSession (lib/auth/session-manager.ts:66:28)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:58:23)

    console.error
      Failed to create session: Error: Session creation failed
          at DatabaseSessionStorage.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/database-session-storage.ts:80:13)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at SessionManager.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/session-manager.ts:66:28)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:58:23)

      82 |       }
      83 |     } catch (error) {
    > 84 |       console.error('Failed to create session:', error)
         |               ^
      85 |       throw new Error('Session creation failed')
      86 |     }
      87 |   }

      at SessionManager.error [as createSession] (lib/auth/session-manager.ts:84:15)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:58:23)

    console.error
      Failed to create session: DrizzleQueryError: Failed query: insert into "user_sessions" ("id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at") values (default, $1, $2, $3, default, $4, $5, $6, default) returning "id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at"
      params: 43edfe78-0801-4dac-9d2b-5e7e6c77ecfa,befa6d7d2f7a2354a8a5e9b6f6b13b72f5b827566406ddacf93e87c43adf6674,127.0.0.1,true,2025-07-16T13:47:25.697Z,2025-07-16T14:47:25.697Z
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at /Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/postgres-js/session.ts:58:17
          at DatabaseSessionStorage.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/database-session-storage.ts:60:25)
          at SessionManager.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/session-manager.ts:66:28)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:76:32) {
        query: 'insert into "user_sessions" ("id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at") values (default, $1, $2, $3, default, $4, $5, $6, default) returning "id", "user_id", "session_token", "ip_address", "user_agent", "is_active", "last_activity", "expires_at", "created_at"',
        params: [
          '43edfe78-0801-4dac-9d2b-5e7e6c77ecfa',
          'befa6d7d2f7a2354a8a5e9b6f6b13b72f5b827566406ddacf93e87c43adf6674',
          '127.0.0.1',
          true,
          '2025-07-16T13:47:25.697Z',
          '2025-07-16T14:47:25.697Z'
        ],
        cause: PostgresError: insert or update on table "user_sessions" violates foreign key constraint "user_sessions_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(43edfe78-0801-4dac-9d2b-5e7e6c77ecfa) is not present in table "users".',
          schema_name: 'public',
          table_name: 'user_sessions',
          constraint_name: 'user_sessions_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      77 |       return sessionToken
      78 |     } catch (error) {
    > 79 |       console.error('Failed to create session:', error)
         |               ^
      80 |       throw new Error('Session creation failed')
      81 |     }
      82 |   }

      at DatabaseSessionStorage.error [as createSession] (lib/auth/database-session-storage.ts:79:15)
      at SessionManager.createSession (lib/auth/session-manager.ts:66:28)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:76:32)

    console.error
      Failed to create session: Error: Session creation failed
          at DatabaseSessionStorage.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/database-session-storage.ts:80:13)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at SessionManager.createSession (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/session-manager.ts:66:28)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:76:32)

      82 |       }
      83 |     } catch (error) {
    > 84 |       console.error('Failed to create session:', error)
         |               ^
      85 |       throw new Error('Session creation failed')
      86 |     }
      87 |   }

      at SessionManager.error [as createSession] (lib/auth/session-manager.ts:84:15)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:76:32)

    console.error
      Database user creation error: DrizzleQueryError: Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values (default, $1, $2, $3, $4, $5, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
      params: test@example.com,,Test User,$2y$12$Y7dWNZ23u3hMTYk24Abh6e1dgMI01xzCZXPNncsQ2EGQ2V72gqz6C,
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at /Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/postgres-js/session.ts:58:17
          at DatabaseTestAuthProvider.createUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database-test.ts:95:25)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:16:20) {
        query: 'insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values (default, $1, $2, $3, $4, $5, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"',
        params: [
          'test@example.com',
          null,
          'Test User',
          '$2y$12$Y7dWNZ23u3hMTYk24Abh6e1dgMI01xzCZXPNncsQ2EGQ2V72gqz6C',
          null
        ],
        cause: PostgresError: duplicate key value violates unique constraint "users_email_key"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23505',
          detail: 'Key (email)=(test@example.com) already exists.',
          schema_name: 'public',
          table_name: 'users',
          constraint_name: 'users_email_key',
          file: 'nbtinsert.c',
          line: '666',
          routine: '_bt_check_unique'
        }
      }

      111 |       }
      112 |     } catch (error) {
    > 113 |       console.error('Database user creation error:', error)
          |               ^
      114 |       return {
      115 |         success: false,
      116 |         error: 'User creation failed'

      at DatabaseTestAuthProvider.error [as createUser] (lib/auth/providers/database-test.ts:113:15)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:16:20)

    console.error
      Database user creation error: DrizzleQueryError: Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values (default, $1, $2, $3, $4, $5, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
      params: test@example.com,,Test User,$2y$12$4MdJwD8VNKGaSfsnV6GLQeXVwva1mFovi.4SoPzA.UfaI7XSlvoDG,
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at /Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/postgres-js/session.ts:58:17
          at DatabaseTestAuthProvider.createUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database-test.ts:95:25)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/session-manager.test.ts:16:20) {
        query: 'insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values (default, $1, $2, $3, $4, $5, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"',
        params: [
          'test@example.com',
          null,
          'Test User',
          '$2y$12$4MdJwD8VNKGaSfsnV6GLQeXVwva1mFovi.4SoPzA.UfaI7XSlvoDG',
          null
        ],
        cause: PostgresError: duplicate key value violates unique constraint "users_email_key"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23505',
          detail: 'Key (email)=(test@example.com) already exists.',
          schema_name: 'public',
          table_name: 'users',
          constraint_name: 'users_email_key',
          file: 'nbtinsert.c',
          line: '666',
          routine: '_bt_check_unique'
        }
      }

      111 |       }
      112 |     } catch (error) {
    > 113 |       console.error('Database user creation error:', error)
          |               ^
      114 |       return {
      115 |         success: false,
      116 |         error: 'User creation failed'

      at DatabaseTestAuthProvider.error [as createUser] (lib/auth/providers/database-test.ts:113:15)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:16:20)

  ● SessionManager › createSession › should create a new session with secure configuration

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

  ● SessionManager › createSession › should create unique session tokens

    Session creation failed

      83 |     } catch (error) {
      84 |       console.error('Failed to create session:', error)
    > 85 |       throw new Error('Session creation failed')
         |             ^
      86 |     }
      87 |   }
      88 |

      at SessionManager.createSession (lib/auth/session-manager.ts:85:13)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:58:23)

  ● SessionManager › validateSession › should validate a valid session

    Session creation failed

      83 |     } catch (error) {
      84 |       console.error('Failed to create session:', error)
    > 85 |       throw new Error('Session creation failed')
         |             ^
      86 |     }
      87 |   }
      88 |

      at SessionManager.createSession (lib/auth/session-manager.ts:85:13)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:76:32)

  ● SessionManager › validateSession › should reject invalid session token

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

  ● SessionManager › invalidateUserSessions › should invalidate all sessions for a user

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      142 |       // Verify both sessions are valid
      143 |       expect((await sessionManager.validateSession(token1, '127.0.0.1')).valid).toBe(true)
    > 144 |       expect((await sessionManager.validateSession(token2, '192.168.1.1')).valid).toBe(true)
          |                                                                                   ^
      145 |       
      146 |       // Invalidate all sessions
      147 |       await sessionManager.invalidateUserSessions(testUser.id, 'security_test')

      at Object.toBe (__tests__/lib/auth/session-manager.test.ts:144:83)

  ● SessionManager › cookie configuration › should create correct cookie string

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

  ● SessionManager › session security › should handle session cleanup

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

FAIL __tests__/lib/auth/providers/database.test.ts (5.991 s)
  ● Console

    console.error
      Database user creation error: DrizzleQueryError: Failed query: insert into "password_history" ("id", "user_id", "password_hash", "created_at") values (default, $1, $2, default)
      params: 95e367f5-b8e0-46e5-94a1-7c5f711445f6,$2y$12$jT1rRecJS/e1qiCobBxF8ugPkNARftoHXp3CH6bxXF3FwkZHt2aTW
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at DatabaseAuthProvider.createUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database.ts:152:7)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/providers/database.test.ts:75:27) {
        query: 'insert into "password_history" ("id", "user_id", "password_hash", "created_at") values (default, $1, $2, default)',
        params: [
          '95e367f5-b8e0-46e5-94a1-7c5f711445f6',
          '$2y$12$jT1rRecJS/e1qiCobBxF8ugPkNARftoHXp3CH6bxXF3FwkZHt2aTW'
        ],
        cause: PostgresError: insert or update on table "password_history" violates foreign key constraint "password_history_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(95e367f5-b8e0-46e5-94a1-7c5f711445f6) is not present in table "users".',
          schema_name: 'public',
          table_name: 'password_history',
          constraint_name: 'password_history_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      165 |       }
      166 |     } catch (error) {
    > 167 |       console.error('Database user creation error:', error)
          |               ^
      168 |       return {
      169 |         success: false,
      170 |         error: 'User creation failed'

      at DatabaseAuthProvider.error [as createUser] (lib/auth/providers/database.ts:167:15)
      at Object.<anonymous> (__tests__/lib/auth/providers/database.test.ts:75:27)

    console.error
      Failed to record auth attempt: DrizzleQueryError: Failed query: insert into "auth_attempts" ("id", "identifier", "type", "success", "ip_address", "user_agent", "user_id", "created_at") values (default, $1, $2, $3, default, default, $4, default)
      params: test@example.com,login,true,02322e2c-6274-4f56-a4d5-b3c3ec7de7f6
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at RateLimiter.recordAttempt (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/rate-limiter.ts:140:7)
          at DatabaseAuthProvider.authenticateUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database.ts:62:7)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/providers/database.test.ts:98:26) {
        query: 'insert into "auth_attempts" ("id", "identifier", "type", "success", "ip_address", "user_agent", "user_id", "created_at") values (default, $1, $2, $3, default, default, $4, default)',
        params: [
          'test@example.com',
          'login',
          true,
          '02322e2c-6274-4f56-a4d5-b3c3ec7de7f6'
        ],
        cause: PostgresError: insert or update on table "auth_attempts" violates foreign key constraint "auth_attempts_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(02322e2c-6274-4f56-a4d5-b3c3ec7de7f6) is not present in table "users".',
          schema_name: 'public',
          table_name: 'auth_attempts',
          constraint_name: 'auth_attempts_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      147 |       })
      148 |     } catch (error) {
    > 149 |       console.error('Failed to record auth attempt:', error)
          |               ^
      150 |       // Don't throw - recording attempts is important but shouldn't block auth
      151 |     }
      152 |   }

      at RateLimiter.error [as recordAttempt] (lib/auth/rate-limiter.ts:149:15)
      at DatabaseAuthProvider.authenticateUser (lib/auth/providers/database.ts:62:7)
      at Object.<anonymous> (__tests__/lib/auth/providers/database.test.ts:98:26)

    console.error
      Failed to record auth attempt: DrizzleQueryError: Failed query: insert into "auth_attempts" ("id", "identifier", "type", "success", "ip_address", "user_agent", "user_id", "created_at") values (default, $1, $2, $3, default, default, $4, default)
      params: test@example.com,signup,true,f535b46a-7e47-4c4d-b6e1-cebbced2d6e4
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at RateLimiter.recordAttempt (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/rate-limiter.ts:140:7)
          at DatabaseAuthProvider.createUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database.ts:158:7)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/providers/database.test.ts:138:28) {
        query: 'insert into "auth_attempts" ("id", "identifier", "type", "success", "ip_address", "user_agent", "user_id", "created_at") values (default, $1, $2, $3, default, default, $4, default)',
        params: [
          'test@example.com',
          'signup',
          true,
          'f535b46a-7e47-4c4d-b6e1-cebbced2d6e4'
        ],
        cause: PostgresError: insert or update on table "auth_attempts" violates foreign key constraint "auth_attempts_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(f535b46a-7e47-4c4d-b6e1-cebbced2d6e4) is not present in table "users".',
          schema_name: 'public',
          table_name: 'auth_attempts',
          constraint_name: 'auth_attempts_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      147 |       })
      148 |     } catch (error) {
    > 149 |       console.error('Failed to record auth attempt:', error)
          |               ^
      150 |       // Don't throw - recording attempts is important but shouldn't block auth
      151 |     }
      152 |   }

      at RateLimiter.error [as recordAttempt] (lib/auth/rate-limiter.ts:149:15)
      at DatabaseAuthProvider.createUser (lib/auth/providers/database.ts:158:7)
      at Object.<anonymous> (__tests__/lib/auth/providers/database.test.ts:138:28)

    console.error
      Failed to record auth attempt: DrizzleQueryError: Failed query: insert into "auth_attempts" ("id", "identifier", "type", "success", "ip_address", "user_agent", "user_id", "created_at") values (default, $1, $2, $3, default, default, $4, default)
      params: test@example.com,signup,true,484ba5ff-68db-42e1-98d3-0856f2f8ecb9
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at RateLimiter.recordAttempt (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/rate-limiter.ts:140:7)
          at DatabaseAuthProvider.createUser (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database.ts:158:7)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/providers/database.test.ts:165:28) {
        query: 'insert into "auth_attempts" ("id", "identifier", "type", "success", "ip_address", "user_agent", "user_id", "created_at") values (default, $1, $2, $3, default, default, $4, default)',
        params: [
          'test@example.com',
          'signup',
          true,
          '484ba5ff-68db-42e1-98d3-0856f2f8ecb9'
        ],
        cause: PostgresError: insert or update on table "auth_attempts" violates foreign key constraint "auth_attempts_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(484ba5ff-68db-42e1-98d3-0856f2f8ecb9) is not present in table "users".',
          schema_name: 'public',
          table_name: 'auth_attempts',
          constraint_name: 'auth_attempts_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      147 |       })
      148 |     } catch (error) {
    > 149 |       console.error('Failed to record auth attempt:', error)
          |               ^
      150 |       // Don't throw - recording attempts is important but shouldn't block auth
      151 |     }
      152 |   }

      at RateLimiter.error [as recordAttempt] (lib/auth/rate-limiter.ts:149:15)
      at DatabaseAuthProvider.createUser (lib/auth/providers/database.ts:158:7)
      at Object.<anonymous> (__tests__/lib/auth/providers/database.test.ts:165:28)

    console.error
      Database changeUserPassword error: DrizzleQueryError: Failed query: insert into "password_history" ("id", "user_id", "password_hash", "created_at") values (default, $1, $2, default)
      params: 01e4d6f3-1a18-46cf-b06a-2d2eacb4776c,$2y$12$kF3NJ7RYSwEmJn3aMKq3weXIAw6xq78jfONLA1CP9ZcTC9POr5xcS
          at PostgresJsPreparedQuery.queryWithCache (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/src/pg-core/session.ts:74:11)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at DatabaseAuthProvider.changeUserPassword (/Users/efaroni/Coding/modern-saas-starter-template/lib/auth/providers/database.ts:481:7)
          at Object.<anonymous> (/Users/efaroni/Coding/modern-saas-starter-template/__tests__/lib/auth/providers/database.test.ts:362:28) {
        query: 'insert into "password_history" ("id", "user_id", "password_hash", "created_at") values (default, $1, $2, default)',
        params: [
          '01e4d6f3-1a18-46cf-b06a-2d2eacb4776c',
          '$2y$12$kF3NJ7RYSwEmJn3aMKq3weXIAw6xq78jfONLA1CP9ZcTC9POr5xcS'
        ],
        cause: PostgresError: insert or update on table "password_history" violates foreign key constraint "password_history_user_id_users_id_fk"
            at ErrorResponse (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:794:26)
            at handle (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:480:6)
            at Socket.data (/Users/efaroni/Coding/modern-saas-starter-template/node_modules/postgres/cjs/src/connection.js:315:9)
            at Socket.emit (node:events:524:28)
            at addChunk (node:internal/streams/readable:561:12)
            at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)
            at Socket.Readable.push (node:internal/streams/readable:392:5)
            at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
          severity_local: 'ERROR',
          severity: 'ERROR',
          code: '23503',
          detail: 'Key (user_id)=(01e4d6f3-1a18-46cf-b06a-2d2eacb4776c) is not present in table "users".',
          schema_name: 'public',
          table_name: 'password_history',
          constraint_name: 'password_history_user_id_users_id_fk',
          file: 'ri_triggers.c',
          line: '2608',
          routine: 'ri_ReportViolation'
        }
      }

      507 |       }
      508 |     } catch (error) {
    > 509 |       console.error('Database changeUserPassword error:', error)
          |               ^
      510 |       return {
      511 |         success: false,
      512 |         error: 'Failed to change password'

      at DatabaseAuthProvider.error [as changeUserPassword] (lib/auth/providers/database.ts:509:15)
      at Object.<anonymous> (__tests__/lib/auth/providers/database.test.ts:362:28)

  ● DatabaseAuthProvider › createUser › should reject duplicate emails

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:76:23)

  ● DatabaseAuthProvider › authenticateUser › should reject authentication with wrong password

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:114:23)

  ● DatabaseAuthProvider › getUserById › should get user by ID

    expect(received).toBe(expected) // Object.is equality

    Expected: "test@example.com"
    Received: undefined

      142 |       const getUserResult = await provider.getUserById(createResult.user!.id)
      143 |       authTestHelpers.assertAuthResult(getUserResult, true)
    > 144 |       expect(getUserResult.user?.email).toBe(userData.email)
          |                                         ^
      145 |       expect(getUserResult.user?.name).toBe(userData.name)
      146 |       authTestHelpers.assertUserStructure(getUserResult.user!)
      147 |     })

      at Object.toBe (__tests__/lib/auth/providers/database.test.ts:144:41)

  ● DatabaseAuthProvider › getUserByEmail › should get user by email

    expect(received).toBe(expected) // Object.is equality

    Expected: "test@example.com"
    Received: undefined

      169 |       const getUserResult = await provider.getUserByEmail(userData.email)
      170 |       authTestHelpers.assertAuthResult(getUserResult, true)
    > 171 |       expect(getUserResult.user?.email).toBe(userData.email)
          |                                         ^
      172 |       expect(getUserResult.user?.name).toBe(userData.name)
      173 |       authTestHelpers.assertUserStructure(getUserResult.user!)
      174 |     })

      at Object.toBe (__tests__/lib/auth/providers/database.test.ts:171:41)

  ● DatabaseAuthProvider › verifyUserEmail › should verify user email

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:331:23)

  ● DatabaseAuthProvider › changeUserPassword › should change user password

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:363:23)

PASS __tests__/integration/auth/error-handling-scenarios.test.ts (7.82 s)
PASS __tests__/lib/auth/oauth.test.ts (14.432 s)
A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.

Summary of all failing tests
FAIL __tests__/lib/auth/providers/database-test.test.ts
  ● DatabaseTestAuthProvider › getUserById › should get user by ID

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database-test.test.ts:130:23)

FAIL __tests__/lib/auth/rate-limiter.test.ts
  ● RateLimiter › checkRateLimit › should differentiate between different action types

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      60 |       const signupResult = await rateLimiter.checkRateLimit(identifier, 'signup')
      61 |       
    > 62 |       expect(loginResult.allowed).toBe(false)
         |                                   ^
      63 |       expect(signupResult.allowed).toBe(true)
      64 |     })
      65 |

      at Object.toBe (__tests__/lib/auth/rate-limiter.test.ts:62:35)

  ● RateLimiter › getRecentFailures › should return all failures when no filters provided

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 2
    Received:    0

      135 |       const failures = await rateLimiter.getRecentFailures()
      136 |       
    > 137 |       expect(failures.length).toBeGreaterThanOrEqual(2)
          |                               ^
      138 |       failures.forEach(failure => {
      139 |         expect(failure.success).toBe(false)
      140 |       })

      at Object.toBeGreaterThanOrEqual (__tests__/lib/auth/rate-limiter.test.ts:137:31)

  ● RateLimiter › integration with different rate limits › should apply correct limits for different actions

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      218 |       const signupResult = await rateLimiter.checkRateLimit(identifier, 'signup')
      219 |       
    > 220 |       expect(loginResult.allowed).toBe(false)
          |                                   ^
      221 |       expect(signupResult.allowed).toBe(false)
      222 |     })
      223 |

      at Object.toBe (__tests__/lib/auth/rate-limiter.test.ts:220:35)

FAIL __tests__/lib/auth/password-expiration.test.ts
  ● PasswordExpirationService › checkPasswordExpiration › should return not expired for new password

    Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values ($1, $2, $3, $4, $5, default, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
    params: 00000000-0000-0000-0000-000000000001,test@example.com,,Test User,$2y$10$hoiBxm.6v9ENzfqkcR7q2urS4SeOkWhJSXvnq9kjH.57Z5IDqBCc2

      309 |   async createTestUser(overrides: Partial<InsertUser> = {}): Promise<InsertUser> {
      310 |     const user = await testDataFactories.createAuthUser(overrides)
    > 311 |     const [insertedUser] = await testDb.insert(users).values(user).returning()
          |                            ^
      312 |     return insertedUser
      313 |   },
      314 |

      at PostgresJsPreparedQuery.queryWithCache (node_modules/src/pg-core/session.ts:74:11)
      at node_modules/src/postgres-js/session.ts:58:17
      at Object.createTestUser (lib/db/test-helpers.ts:311:28)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:13:16)

    Cause:
    PostgresError: duplicate key value violates unique constraint "users_email_key"

      at ErrorResponse (node_modules/postgres/cjs/src/connection.js:794:26)
      at handle (node_modules/postgres/cjs/src/connection.js:480:6)
      at Socket.data (node_modules/postgres/cjs/src/connection.js:315:9)

  ● PasswordExpirationService › getUsersWithExpiringPasswords › should return users with expiring passwords

    Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values ($1, $2, $3, $4, $5, default, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
    params: 00000000-0000-0000-0000-000000000001,test@example.com,,Test User,$2y$10$bRPwW6.Ajb9/PKqOGI13q.bgT8tYag7s1d/8x.jk0vE/NWq8Y3bkS

      309 |   async createTestUser(overrides: Partial<InsertUser> = {}): Promise<InsertUser> {
      310 |     const user = await testDataFactories.createAuthUser(overrides)
    > 311 |     const [insertedUser] = await testDb.insert(users).values(user).returning()
          |                            ^
      312 |     return insertedUser
      313 |   },
      314 |

      at PostgresJsPreparedQuery.queryWithCache (node_modules/src/pg-core/session.ts:74:11)
      at node_modules/src/postgres-js/session.ts:58:17
      at Object.createTestUser (lib/db/test-helpers.ts:311:28)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:13:16)

    Cause:
    PostgresError: duplicate key value violates unique constraint "users_email_key"

      at ErrorResponse (node_modules/postgres/cjs/src/connection.js:794:26)
      at handle (node_modules/postgres/cjs/src/connection.js:480:6)
      at Socket.data (node_modules/postgres/cjs/src/connection.js:315:9)

  ● PasswordExpirationService › integration scenarios › should handle complete password expiration workflow

    Failed query: insert into "users" ("id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at") values ($1, $2, $3, $4, $5, default, default, default) returning "id", "email", "email_verified", "name", "password", "image", "created_at", "updated_at"
    params: 00000000-0000-0000-0000-000000000001,test@example.com,,Test User,$2y$10$u.xQpWJ5f0QOlV5S0pWG4.waZ2n2UA386pUMRmQgFn1UQTTeCnHNO

      309 |   async createTestUser(overrides: Partial<InsertUser> = {}): Promise<InsertUser> {
      310 |     const user = await testDataFactories.createAuthUser(overrides)
    > 311 |     const [insertedUser] = await testDb.insert(users).values(user).returning()
          |                            ^
      312 |     return insertedUser
      313 |   },
      314 |

      at PostgresJsPreparedQuery.queryWithCache (node_modules/src/pg-core/session.ts:74:11)
      at node_modules/src/postgres-js/session.ts:58:17
      at Object.createTestUser (lib/db/test-helpers.ts:311:28)
      at Object.<anonymous> (__tests__/lib/auth/password-expiration.test.ts:13:16)

    Cause:
    PostgresError: duplicate key value violates unique constraint "users_email_key"

      at ErrorResponse (node_modules/postgres/cjs/src/connection.js:794:26)
      at handle (node_modules/postgres/cjs/src/connection.js:480:6)
      at Socket.data (node_modules/postgres/cjs/src/connection.js:315:9)

FAIL __tests__/lib/auth/session-manager.test.ts
  ● SessionManager › createSession › should create a new session with secure configuration

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

  ● SessionManager › createSession › should create unique session tokens

    Session creation failed

      83 |     } catch (error) {
      84 |       console.error('Failed to create session:', error)
    > 85 |       throw new Error('Session creation failed')
         |             ^
      86 |     }
      87 |   }
      88 |

      at SessionManager.createSession (lib/auth/session-manager.ts:85:13)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:58:23)

  ● SessionManager › validateSession › should validate a valid session

    Session creation failed

      83 |     } catch (error) {
      84 |       console.error('Failed to create session:', error)
    > 85 |       throw new Error('Session creation failed')
         |             ^
      86 |     }
      87 |   }
      88 |

      at SessionManager.createSession (lib/auth/session-manager.ts:85:13)
      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:76:32)

  ● SessionManager › validateSession › should reject invalid session token

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

  ● SessionManager › invalidateUserSessions › should invalidate all sessions for a user

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      142 |       // Verify both sessions are valid
      143 |       expect((await sessionManager.validateSession(token1, '127.0.0.1')).valid).toBe(true)
    > 144 |       expect((await sessionManager.validateSession(token2, '192.168.1.1')).valid).toBe(true)
          |                                                                                   ^
      145 |       
      146 |       // Invalidate all sessions
      147 |       await sessionManager.invalidateUserSessions(testUser.id, 'security_test')

      at Object.toBe (__tests__/lib/auth/session-manager.test.ts:144:83)

  ● SessionManager › cookie configuration › should create correct cookie string

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

  ● SessionManager › session security › should handle session cleanup

    Failed to create test user for session tests

      21 |     
      22 |     if (!result.success || !result.user) {
    > 23 |       throw new Error('Failed to create test user for session tests')
         |             ^
      24 |     }
      25 |     
      26 |     testUser = result.user

      at Object.<anonymous> (__tests__/lib/auth/session-manager.test.ts:23:13)

FAIL __tests__/lib/auth/providers/database.test.ts (5.991 s)
  ● DatabaseAuthProvider › createUser › should reject duplicate emails

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:76:23)

  ● DatabaseAuthProvider › authenticateUser › should reject authentication with wrong password

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:114:23)

  ● DatabaseAuthProvider › getUserById › should get user by ID

    expect(received).toBe(expected) // Object.is equality

    Expected: "test@example.com"
    Received: undefined

      142 |       const getUserResult = await provider.getUserById(createResult.user!.id)
      143 |       authTestHelpers.assertAuthResult(getUserResult, true)
    > 144 |       expect(getUserResult.user?.email).toBe(userData.email)
          |                                         ^
      145 |       expect(getUserResult.user?.name).toBe(userData.name)
      146 |       authTestHelpers.assertUserStructure(getUserResult.user!)
      147 |     })

      at Object.toBe (__tests__/lib/auth/providers/database.test.ts:144:41)

  ● DatabaseAuthProvider › getUserByEmail › should get user by email

    expect(received).toBe(expected) // Object.is equality

    Expected: "test@example.com"
    Received: undefined

      169 |       const getUserResult = await provider.getUserByEmail(userData.email)
      170 |       authTestHelpers.assertAuthResult(getUserResult, true)
    > 171 |       expect(getUserResult.user?.email).toBe(userData.email)
          |                                         ^
      172 |       expect(getUserResult.user?.name).toBe(userData.name)
      173 |       authTestHelpers.assertUserStructure(getUserResult.user!)
      174 |     })

      at Object.toBe (__tests__/lib/auth/providers/database.test.ts:171:41)

  ● DatabaseAuthProvider › verifyUserEmail › should verify user email

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:331:23)

  ● DatabaseAuthProvider › changeUserPassword › should change user password

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      378 |   assertAuthResult(result: any, expectedSuccess: boolean, expectUser: boolean = true): void {
      379 |     expect(result).toHaveProperty('success')
    > 380 |     expect(result.success).toBe(expectedSuccess)
          |                            ^
      381 |     
      382 |     if (expectedSuccess) {
      383 |       if (expectUser) {

      at Object.toBe [as assertAuthResult] (lib/db/test-helpers.ts:380:28)
      at Object.assertAuthResult (__tests__/lib/auth/providers/database.test.ts:363:23)


Test Suites: 5 failed, 18 passed, 23 total
Tests:       20 failed, 295 passed, 315 total
Snapshots:   0 total
Time:        15.596 s
Ran all test suites.
